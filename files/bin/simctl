#!/bin/bash 

kill_docker="sudo docker stop simtools && sudo docker rm simtools"
start_docker="sudo docker start simtools"
run_docker="sudo docker run -d -it --device /dev/net/tun --name=simtools --cap-add=NET_ADMIN --network=host --ipc=host simtools /bin/bash"

#preCommand is used to build the command to be run
preCommand=""

#sudo simctl restart: is used to recreate the container in case something goes wrong 
# or just as a quick and nasty way to change from one scenario to another
if [[ "$1" =~ "restart" ]]; then
	eval $kill_docker
	eval $run_docker
else
	# Check if the container has been already created and it's currently running 
	check=`sudo docker ps -a | grep simtools`
	if [ -z "$check" ]; then
		eval $run_docker
	else
		# Check if the container has been previously created but now it is stopped
		check=`sudo docker ps | grep simtools`
		if [ -z "$check" ]; then
			eval $start_docker
		fi
	fi

	# Build the docker command prefix 
	preCommand="sudo docker exec -it simtools simctl "

	# If we have further parameters 
	if [[ $# -ne 0 ]]; then
		preCommand+="$@"
		# If command to be run requires getting a terminal, check for the right one
		if [[ $preCommand == *"get"* ]]; then
			tmp="$preCommand"
			check=`ls /usr/bin | grep xterm`
			if [ ! -z "$check" ]; then
				preCommand="xterm -bg black -fg green -e '$tmp; /bin/bash'"
			fi
			check=`ls /usr/bin | grep konsole`
			if [ ! -z "$check" ]; then
				# Usará el perfil simtools.profile si se encuentra en ~/.local/share/konsole/simtools.profile y sino usará el perfil default
				preCommand="konsole --profile simtools --hold -e '$tmp' &"
			fi
			check=`ls /usr/bin | grep gnome-terminal`
			if [ ! -z "$check" ]; then
				# Con gnome-terminal, el usuario debe crear su propio perfil manualmente y nombrarlo simtools como se explica en la guía de instalación
				preCommand="gnome-terminal --profile simtools -- $tmp"
			fi
		fi
	fi
	# Run the command
	eval $preCommand
fi
